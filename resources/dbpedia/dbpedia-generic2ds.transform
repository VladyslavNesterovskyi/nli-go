[
    root(P1) subject(P1, S1) isa(S1, who) => who(S1);
    root(E1) copula(E1, A1) subject(E1, E2) isa(A1, be) isa(E1, who) => who(E2);
    root(P1) subject(P1, S1) mod(S1, M1) mod(M1, M2) isa(M2, how) isa(M1, many) => how_many(S1);
    root(P1) aux(P1, A1) isa(A1, be) subject(P1, E1) => yes_no();

    == todo: nice if bear and date could be split ==
    root(P1) isa(P1, bear) subject(P1, S1) aux(P1, A1) isa(A1, be) mod(P1, W1) isa(W1, when) isa(A, be) => when() birth_date(S1, B1);

    isa(P1, marry) subject(P1, A) object(P1, B) => married_to(A, B);
    isa(P1, marry) subject(P1, A) mod(P1, Prep) case(B, Prep) isa(Prep, to) => married_to(A, B);
    mod(E1, E2) case(E2, M1) isa(M1, possession) isa(E1, father) => has_father(E2, E1);
    mod(E1, E2) case(E2, M1) isa(M1, possession) isa(E1, mother) => has_mother(E2, E1);
    mod(E1, E2) case(E2, M1) isa(M1, possession) isa(E1, daughter) => has_daughter(E2, E1);
    mod(E1, E2) case(E2, M1) isa(M1, possession) isa(E1, son) => has_son(E2, E1);
    isa(S, child) isa(P1, have) subject(P1, S) object(P1, O) => have_child(O, S);

    tense(V, _) => ;
]