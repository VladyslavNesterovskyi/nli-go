[
    /* Who married X? */
    {
        condition: question(_) who(A) marry(_, A, B),
        no_results: {
            answer: dont_know()
        },
        some_results: {
            preparation: gender(B, G) name(A, N, canonical_name),
            answer: gender(B, G) name(A, N) make_and(A, R) married_to(R, B)
        }
    }

    /* Was X married to Y? */
    {
        condition: question(_) yes_no(_) marry(_, A, B),
        no_results: {
            answer: dont_know()
        },
        some_results: {
            answer: result(true)
        }
    }

    /* How many children had X? (counting the children) */
    {
        condition: question(_) how_many(B) have_child(A, B),
        no_results: {
            answer: dont_know()
        },
        some_results: {
            preparation: gender(A, Gender) number_of(B, Number),
            answer: gender(A, Gender) have_child(A, C) count(C, Number)
        }
    }

    /* How many? */
    {
        condition: question(_) how_many(B),
        no_results: {
            answer: dont_know()
        },
        some_results: {
            preparation: number_of(B, Number),
            answer: canned(Number)
        }
    }

    /* How many children had X? (using a number-of-children attribute) */
    {
        condition: question(_) how_many(B) have_child(A, B),
        transformations: [
            have_child(A, B) => have_n_children(A, Number);
        ],
        no_results: {
            answer: dont_know()
        },
        some_results: {
            preparation: gender(A, Gender),
            answer: gender(A, Gender) have_child(A, C) count(C, Number)
        }
    }

    /* Who was X's father? */
    {
        condition: question(_) who(B) has_father(A, B),
        no_results: {
            answer: dont_know()
        },
        some_results: {
            preparation: gender(A, Gender) name(B, N, canonical_name),
            answer: gender(A, Gender) name(B, N) has_father(A, B)
        }
    }

    /* Who was X's mother? */
    {
        condition: question(_) who(B) has_mother(A, B),
        no_results: {
            answer: dont_know()
        },
        some_results: {
            preparation: gender(A, Gender) name(B, N, canonical_name),
            answer: gender(A, Gender) name(B, N) has_mother(A, B)
        }
    }

    /* When was X born? */
    {
        condition: question(P1) when(P1) bear(P1, A, B),
        transformations: [
            bear(P1, A, B) when(P1) => birth_date(B, Ymd);
        ],
        no_results: {
            answer: dont_know()
        },
        some_results: {
            preparation: gender(B, Gender) split(Ymd, '-', Year, Month, Day),
            answer: gender(B, Gender) birth_date(B, Day, Month, Year)
        }
    }

    /* When did X die? */
    {
        condition: question(P1) when(P1) die(P1, A),
        transformations: [
            die(P1, A) when(P1) => death_date(A, Ymd);
        ],
        no_results: {
            answer: dont_know()
        },
        some_results: {
            preparation: gender(A, Gender) split(Ymd, '-', Year, Month, Day),
            answer: gender(A, Gender) death_date(A, Day, Month, Year)
        }
    }

    /* Who is X? */
    {
        condition: question(_) who(B) has_husband(A, B),
        no_results: {
            answer: dont_know()
        },
        some_results: {
            preparation: name(B, N, canonical_name),
            answer: name(B, N) make_and(B, R) root(R)
        }
    }

    /* Who is X? */
    {
        condition: question(_) who(B) has_wife(A, B),
        no_results: {
            answer: dont_know()
        },
        some_results: {
            preparation: name(B, N, canonical_name),
            answer: name(B, N) make_and(B, R) root(R)
        }
    }

    /* Who is X? */
    {
        condition: question(_) who(B),
        no_results: {
            answer: dont_know()
        },
        some_results: {
            preparation: long_description(B, D),
            answer: canned(D)
        }
    }

    /* What is the capital of X? */
    {
        condition: question(_) what(B),
        no_results: {
            answer: dont_know()
        },
        some_results: {
            preparation: label(B, L),
            answer: canned(L)
        }
    }

]