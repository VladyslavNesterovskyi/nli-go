[
    == Who married X? ==
    {
        condition: question(S, wh_question) isa(A, who) married_to(A, B),
        no_results: {
            answer: dont_know()
        },
        some_results: {
            preparation: gender(B, G) name(A, N, canonical_name),
            answer: gender(B, G) name(A, N) make_and(A, R) married_to(R, B)
        }
    }

    == How many children had X? (counting the children) ==
    {
        condition: question(S, wh_question) isa(Q, how) isa(Q, many) have_child(A, B),
        no_results: {
            answer: dont_know()
        },
        some_results: {
            preparation: gender(A, Gender) number_of(Number, B),
            answer: gender(A, Gender) have_child(A, C) count(C, Number)
        }
    }

    == How many children had X? (using a number-of-children attribute) ==
    {
        condition: question(S, wh_question) isa(Q, how) isa(Q, many) have_child(A, B),
        transformations: [
            have_child(A, B) => have_n_children(A, Number);
quantification(_, _, _, _) => ;
        ],
        no_results: {
            answer: dont_know()
        },
        some_results: {
            preparation: gender(A, Gender),
            answer: gender(A, Gender) have_child(A, C) count(C, Number)
        }
    }

    == Who was X's father? ==
    {
        condition: question(S, wh_question) isa(X, who) has_father(A, B),
        no_results: {
            answer: dont_know()
        },
        some_results: {
            preparation: gender(A, Gender) name(B, N, canonical_name),
            answer: gender(A, Gender) name(B, N) has_father(A, B)
        }
    }

    == Who was X's mother? ==
    {
        condition: question(S, wh_question) isa(X, who) has_mother(A, B),
        no_results: {
            answer: dont_know()
        },
        some_results: {
            preparation: gender(A, Gender) name(B, N, canonical_name),
            answer: gender(A, Gender) name(B, N) has_mother(A, B)
        }
    }
]